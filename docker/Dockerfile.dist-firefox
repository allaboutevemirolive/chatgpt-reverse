# docker/Dockerfile.dist-firefox

# Stage 1: Install dependencies
FROM node:20-slim AS deps
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm

# Copy only necessary files for installation from parent directory
COPY ../package.json ../pnpm-lock.yaml ../pnpm-workspace.yaml ./
# Copy package.json files from packages to leverage Docker cache
COPY ../packages/shared/package.json ./packages/shared/
COPY ../packages/content-script/package.json ./packages/content-script/
COPY ../packages/interceptor/package.json ./packages/interceptor/
COPY ../packages/loadscript/package.json ./packages/loadscript/
COPY ../packages/popup/package.json ./packages/popup/
COPY ../packages/service-worker/package.json ./packages/service-worker/
# If you add more packages, copy their package.json too

# Install dependencies using --frozen-lockfile for reproducibility
RUN pnpm install --frozen-lockfile

# Stage 2: Build the extension
FROM deps AS builder
WORKDIR /app

# Copy the rest of the source code from parent directory
# Copies the project root content into /app
COPY .. .

# Run the build command defined in root package.json
# ASSUMPTION: This script builds AND packages the firefox extension into /app/dist
# If it outputs to /app/build, adjust the final COPY below.
RUN pnpm package:firefox

# Stage 3: Final image with only the build output
FROM node:20-slim AS final

WORKDIR /extension_package # Changed WORKDIR to match dist-chrome for consistency

# Copy the *packaged* extension from the builder stage
# ASSUMPTION: package:firefox script outputs zip to /app/dist
# *** ADJUST THIS PATH if package:firefox outputs elsewhere (e.g., /app/build) ***
COPY --from=builder /app/dist .

# Default command does nothing, the image just contains the build artifacts
# CMD ["echo", "Build artifacts are in /extension_package"] # Optional echo
